plugins {
    id 'java'
    id 'war'
    id 'idea'
    id "com.moowork.node" version "1.3.1"
}

group 'com.ikatas'
version '1.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    jettyVersion = "9.4.30.v20200611"
    warGeneratedDir = "${project.buildDir}/generated/sources/public"
    serverPort = 8080
    contextPath = '/chat'
}

repositories {
    mavenLocal()
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
}

dependencies {
    compileOnly 'javax.websocket:javax.websocket-api:1.1'
    implementation 'org.json:json:20200518'

    testImplementation 'junit:junit:4.13'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'net.sourceforge.htmlunit:htmlunit:2.42.0'
    testImplementation "org.eclipse.jetty:jetty-webapp:$jettyVersion"
    testImplementation "org.eclipse.jetty:jetty-annotations:$jettyVersion"
    testImplementation "org.eclipse.jetty.websocket:javax-websocket-server-impl:$jettyVersion"
}

war {
    from warGeneratedDir
    archiveFileName.set("${project.name}.${archiveExtension.get()}")
}

idea {
    module {
        excludeDirs += [file('.idea'), file('.gradle')]
        downloadSources = true
        downloadJavadoc = true
    }
}

sourceSets {
    itest {
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += sourceSets.main.output + sourceSets.test.output
        java {
            srcDirs = [file('src/itest/java')]
            outputDir = file("${project.buildDir}/classes/itest")
        }
        resources {
            srcDir 'src/itest/resources'
        }
    }
}

tasks.withType(ProcessResources) {
    expand([warSourceDirectory: warGeneratedDir, serverPort: serverPort, contextPath: contextPath])
}

configurations {
    itestImplementation.extendsFrom(testImplementation)
    itestRuntimeOnly.extendsFrom(testRuntimeOnly)
}

task itest(type: Test) {
    testClassesDirs = sourceSets.itest.output.classesDirs
    classpath = sourceSets.itest.runtimeClasspath
}

war.dependsOn(npm_run_build)
itest.dependsOn(npm_run_build)
check.dependsOn([npm_test, itest])

tasks.withType(NpmTask) {
    environment = [production: true, buildDir: warGeneratedDir, webSocketServerURL: "ws://localhost:${serverPort}${contextPath}"]
}

